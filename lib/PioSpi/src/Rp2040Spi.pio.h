// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// rx_gpio //
// ------- //

#define rx_gpio_wrap_target 0
#define rx_gpio_wrap 2

static const uint16_t rx_gpio_program_instructions[] = {
            //     .wrap_target
    0x2000, //  0: wait   0 gpio, 0                  
    0x2080, //  1: wait   1 gpio, 0                  
    0x4001, //  2: in     pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program rx_gpio_program = {
    .instructions = rx_gpio_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config rx_gpio_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + rx_gpio_wrap_target, offset + rx_gpio_wrap);
    return c;
}

static inline void pio_rx_program_init(PIO pio, uint sm, uint offset, uint rxPin, float clk_div) {
    pio_gpio_init(pio, rxPin);
    pio_sm_config c = rx_gpio_program_get_default_config(offset);
    sm_config_set_in_pins(&c, rxPin);
    pio_sm_set_consecutive_pindirs(pio, sm, rxPin, 1, false);
    sm_config_set_in_shift(&c, false, true, 8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_clkdiv(&c, clk_div);
    pio_sm_init(pio, sm, offset, &c);
}
static inline void pio_make_rx_program(pio_program_t *pg, uint16_t* inst, int sck) {
  memcpy(inst, rx_gpio_program_instructions, sizeof(rx_gpio_program_instructions));
  memcpy(pg, &rx_gpio_program, sizeof(rx_gpio_program));
  inst[0] |= sck;
  inst[1] |= sck;
  pg->instructions = inst;
}

#endif

// -------- //
// tx_cpha0 //
// -------- //

#define tx_cpha0_wrap_target 0
#define tx_cpha0_wrap 1

static const uint16_t tx_cpha0_program_instructions[] = {
            //     .wrap_target
    0x6101, //  0: out    pins, 1         side 0 [1] 
    0xb142, //  1: nop                    side 1 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program tx_cpha0_program = {
    .instructions = tx_cpha0_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config tx_cpha0_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + tx_cpha0_wrap_target, offset + tx_cpha0_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

static inline void pio_tx_cpha0_program_init(PIO pio, uint sm, uint offset, uint txPin, uint clk_pin, float clk_div) {
    pio_gpio_init(pio, txPin);
    pio_gpio_init(pio, clk_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, txPin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, clk_pin, 1, true);
    pio_sm_config c = tx_cpha0_program_get_default_config(offset);
    sm_config_set_sideset(&c, 1, false, false);
    sm_config_set_sideset_pins(&c, clk_pin);
    sm_config_set_out_pins(&c, txPin, 1);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_out_shift(&c, false, true, 8);
    sm_config_set_clkdiv(&c, clk_div);
    pio_sm_init(pio, sm, offset, &c);
}

#endif

// -------- //
// tx_cpha1 //
// -------- //

#define tx_cpha1_wrap_target 0
#define tx_cpha1_wrap 2

static const uint16_t tx_cpha1_program_instructions[] = {
            //     .wrap_target
    0x6021, //  0: out    x, 1            side 0     
    0xb101, //  1: mov    pins, x         side 1 [1] 
    0xa042, //  2: nop                    side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program tx_cpha1_program = {
    .instructions = tx_cpha1_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config tx_cpha1_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + tx_cpha1_wrap_target, offset + tx_cpha1_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

static inline void pio_tx_cpha1_program_init(PIO pio, uint sm, uint offset, uint txPin, uint clk_pin, float clk_div) {
    pio_gpio_init(pio, txPin);
    pio_gpio_init(pio, clk_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, txPin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, clk_pin, 1, true);
    pio_sm_config c = tx_cpha1_program_get_default_config(offset);
    sm_config_set_sideset(&c, 1, false, false);
    sm_config_set_sideset_pins(&c, clk_pin);
    sm_config_set_out_pins(&c, txPin, 1);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_out_shift(&c, false, true, 8);
    sm_config_set_clkdiv(&c, clk_div);
    pio_sm_init(pio, sm, offset, &c);
}

#endif

